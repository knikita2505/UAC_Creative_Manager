from fastapi import FastAPI, HTTPException, UploadFile, File, Form, Depends, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, HTMLResponse
from pydantic import BaseModel
from typing import List, Optional
import os
import uuid
from datetime import datetime
import asyncio
import aiofiles
from pathlib import Path
from database import db_manager
from config import ALLOWED_ORIGINS, UPLOAD_DIR, MAX_FILE_SIZE, ALLOWED_VIDEO_TYPES, ALLOWED_IMAGE_TYPES
from integrations import integration_manager

app = FastAPI(title="UAC Creative Manager", version="1.0.0")

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=ALLOWED_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class VideoUpload(BaseModel):
    campaign_name: str
    video_source: str  # "local" –∏–ª–∏ "drive_url"
    drive_url: Optional[str] = None
    thumbnail_option: str  # "none", "first_frame", "soft_modal"
    modal_image_id: Optional[str] = None
    create_formats: bool = False  # –°–æ–∑–¥–∞–≤–∞—Ç—å –ª–∏ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã

class Template(BaseModel):
    id: str
    language: str
    style: str
    background: str
    aggressiveness: str
    category: str
    characteristics: List[str]
    created_at: datetime

class Upload(BaseModel):
    id: str
    template_id: Optional[str]
    youtube_url: str
    campaign_name: str
    upload_date: datetime
    status: str  # "active", "banned"
    ad_group: Optional[str] = None
    metrics: Optional[dict] = None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        print("üöÄ Starting UAC Creative Manager...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            await db_manager.create_default_roles()
            await db_manager.create_log("app_startup", {"message": "UAC Creative Manager started"})
            print("‚úÖ Database connected successfully")
        except Exception as db_error:
            print(f"‚ö†Ô∏è Database connection failed: {db_error}")
            print("üí° To fix this:")
            print("   1. Get API keys from Supabase Dashboard")
            print("   2. Update config.py with your keys")
            print("   3. Run: python3 init_db.py")
            print("   4. Restart the application")
        
        print("üåü Application started successfully!")
        
    except Exception as e:
        print(f"‚ùå Application startup failed: {e}")

@app.get("/")
async def root():
    return {"message": "UAC Creative Manager API"}

@app.post("/upload/video")
async def upload_video(
    campaign_name: str = Form(...),
    video_source: str = Form(...),
    drive_url: Optional[str] = Form(None),
    thumbnail_option: str = Form(...),
    modal_image_id: Optional[str] = Form(None),
    create_formats: bool = Form(False),
    video_file: Optional[UploadFile] = File(None)
):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –Ω–∞ YouTube"""
    try:
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"üîç DEBUG: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É")
        print(f"   campaign_name: {campaign_name}")
        print(f"   video_source: {video_source}")
        print(f"   thumbnail_option: {thumbnail_option}")
        print(f"   modal_image_id: {modal_image_id}")
        print(f"   video_file: {video_file.filename if video_file else 'None'}")
        print(f"   video_file.content_type: {video_file.content_type if video_file else 'None'}")
        
        await db_manager.create_log("upload_video_debug", {
            "campaign_name": campaign_name,
            "video_source": video_source,
            "thumbnail_option": thumbnail_option,
            "modal_image_id": modal_image_id,
            "video_filename": video_file.filename if video_file else None,
            "video_content_type": video_file.content_type if video_file else None
        })
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        upload_id = str(uuid.uuid4())
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        print(f"üîß –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ...")
        if video_source == "local" and video_file:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            print(f"üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...")
            file_path = await save_uploaded_file(video_file)
            print(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
            
            print(f"üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ (–æ—á–∏—Å—Ç–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏ —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è)...")
            processed_path = await process_video(file_path, upload_id)
            print(f"‚úÖ –í–∏–¥–µ–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_path}")
        elif video_source == "drive" and drive_url:
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑ Google Drive
            print(f"‚òÅÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑ Google Drive...")
            processed_path = await download_from_drive(drive_url, upload_id)
            print(f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ: {processed_path}")
        else:
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏")
            raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –≤–∏–¥–µ–æ
        print(f"üìê –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ...")
        orientation = await get_video_orientation(processed_path)
        print(f"‚úÖ –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –≤–∏–¥–µ–æ: {orientation}")
        
        # –ù–æ–º–µ—Ä –∫–æ–ø–∏–∏ (–¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ–≥–¥–∞ 1)
        video_copy_number = 1
        
        # –°–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (–æ—Å–Ω–æ–≤–Ω–æ–µ + –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã)
        videos_to_upload = [
            {
                "path": processed_path,
                "orientation": orientation,
                "copy_number": video_copy_number
            }
        ]
        
        # –°–æ–∑–¥–∞–µ–º –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –æ–ø—Ü–∏—è
        if create_formats:
            print(f"üé¨ –°–æ–∑–¥–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤–∏–¥–µ–æ...")
            other_formats = await create_other_formats(processed_path, upload_id, orientation)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å —Ç–µ–º –∂–µ –Ω–æ–º–µ—Ä–æ–º –∫–æ–ø–∏–∏
            for fmt in other_formats:
                videos_to_upload.append({
                    "path": fmt["path"],
                    "orientation": fmt["orientation"],
                    "copy_number": video_copy_number  # –¢–æ—Ç –∂–µ –Ω–æ–º–µ—Ä –¥–ª—è –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
                })
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –≤–∏–¥–µ–æ –Ω–∞ YouTube
        upload_results = []
        
        for video_data in videos_to_upload:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ
            video_title = generate_video_title(
                campaign_name,
                video_data["orientation"],
                video_data["copy_number"]
            )
            
            print(f"üì§ –ó–∞–≥—Ä—É–∑–∫–∞: {video_title}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∏–Ω–∏–∞—Ç—é—Ä—ã
            thumbnail_path = await process_thumbnail(
                video_data["path"], thumbnail_option, modal_image_id
            )
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ YouTube
            youtube_url = await upload_to_youtube(video_data["path"], video_title, thumbnail_path)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            upload_data = {
                "youtube_url": youtube_url,
                "video_title": video_title,
                "campaign_name": campaign_name,
                "thumbnail_type": thumbnail_option,
                "thumbnail_image_id": modal_image_id if thumbnail_option == "soft_modal" else None,
                "status": "active"
            }
            
            upload_record = await db_manager.create_upload(upload_data)
            
            upload_results.append({
                "upload_id": upload_record["id"],
                "youtube_url": youtube_url,
                "video_title": video_title,
                "orientation": video_data["orientation"],
                "copy_number": video_data["copy_number"],
                "group_name": f"{campaign_name} {datetime.now().strftime('%d.%m.%y')} #{video_data['copy_number']}"
            })
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            await db_manager.create_log(
                "video_uploaded",
                {
                    "upload_id": upload_record["id"],
                    "campaign_name": campaign_name,
                    "youtube_url": youtube_url,
                    "thumbnail_type": thumbnail_option,
                    "orientation": video_data["orientation"]
                }
            )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if len(upload_results) == 1:
            # –û–¥–Ω–æ –≤–∏–¥–µ–æ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç
            return {
                "success": True,
                **upload_results[0]
            }
        else:
            # –ù–µ—Å–∫–æ–ª—å–∫–æ –≤–∏–¥–µ–æ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤
            return {
                "success": True,
                "videos": upload_results,
                "total_uploaded": len(upload_results)
            }
        
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É —Å –ø–æ–ª–Ω—ã–º —Å—Ç–µ–∫—Ç—Ä–µ–π—Å–æ–º
        import traceback
        error_traceback = traceback.format_exc()
        print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ:")
        print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
        print(f"   –°—Ç–µ–∫—Ç—Ä–µ–π—Å:\n{error_traceback}")
        
        await db_manager.create_log("upload_video_error", {
            "error": str(e),
            "error_type": type(e).__name__,
            "traceback": error_traceback,
            "campaign_name": campaign_name,
            "video_source": video_source,
            "thumbnail_option": thumbnail_option
        })
        return JSONResponse(
            status_code=500,
            content={"success": False, "error": str(e), "error_type": type(e).__name__}
        )

@app.post("/upload/videos/batch")
async def upload_videos_batch(
    campaign_name: str = Form(...),
    video_source: str = Form(...),
    drive_urls: Optional[str] = Form(None),  # JSON —Å—Ç—Ä–æ–∫–∞ —Å –º–∞—Å—Å–∏–≤–æ–º —Å—Å—ã–ª–æ–∫
    thumbnail_option: str = Form(...),
    modal_image_id: Optional[str] = Form(None),
    create_formats: bool = Form(False),
    video_files: List[UploadFile] = File(...)
):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∏–¥–µ–æ –Ω–∞ YouTube"""
    try:
        import json
        
        # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Å—ã–ª–æ–∫ –Ω–∞ Google Drive –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
        drive_url_list = []
        if drive_urls:
            try:
                drive_url_list = json.loads(drive_urls)
            except json.JSONDecodeError:
                return JSONResponse(
                    status_code=400,
                    content={"success": False, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–æ–∫ –Ω–∞ Google Drive"}
                )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if video_source == "local":
            video_count = len(video_files)
        else:
            video_count = len(drive_url_list)
        
        if video_count == 0:
            return JSONResponse(
                status_code=400,
                content={"success": False, "error": "–ù–µ —É–∫–∞–∑–∞–Ω—ã –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏"}
            )
        
        results = []
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ
        for i in range(video_count):
            upload_id = str(uuid.uuid4())
            
            try:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                if video_source == "local" and i < len(video_files):
                    file_path = await save_uploaded_file(video_files[i])
                    processed_path = await process_video(file_path, upload_id)
                elif video_source == "drive" and i < len(drive_url_list):
                    processed_path = await download_from_drive(drive_url_list[i], upload_id)
                else:
                    continue
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –≤–∏–¥–µ–æ
                orientation = await get_video_orientation(processed_path)
                
                # –ù–æ–º–µ—Ä –∫–æ–ø–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–∏–¥–µ–æ (i+1)
                video_copy_number = i + 1
                
                # –°–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (–æ—Å–Ω–æ–≤–Ω–æ–µ + –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã)
                videos_to_upload = [
                    {
                        "path": processed_path,
                        "orientation": orientation,
                        "copy_number": video_copy_number
                    }
                ]
                
                # –°–æ–∑–¥–∞–µ–º –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –æ–ø—Ü–∏—è
                if create_formats:
                    other_formats = await create_other_formats(processed_path, upload_id, orientation)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç—ã —Å —Ç–µ–º –∂–µ –Ω–æ–º–µ—Ä–æ–º –∫–æ–ø–∏–∏
                    for fmt in other_formats:
                        videos_to_upload.append({
                            "path": fmt["path"],
                            "orientation": fmt["orientation"],
                            "copy_number": video_copy_number  # –¢–æ—Ç –∂–µ –Ω–æ–º–µ—Ä –¥–ª—è –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
                        })
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –≤–∏–¥–µ–æ
                for video_data in videos_to_upload:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
                    video_title = generate_video_title(
                        campaign_name,
                        video_data["orientation"],
                        video_data["copy_number"]
                    )
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∏–Ω–∏–∞—Ç—é—Ä—ã
                    thumbnail_path = await process_thumbnail(
                        video_data["path"], thumbnail_option, modal_image_id
                    )
                    
                    # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ YouTube
                    youtube_url = await upload_to_youtube(video_data["path"], video_title, thumbnail_path)
                    
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    upload_data = {
                        "youtube_url": youtube_url,
                        "video_title": video_title,
                        "campaign_name": campaign_name,
                        "thumbnail_type": thumbnail_option,
                        "thumbnail_image_id": modal_image_id if thumbnail_option == "soft_modal" else None,
                        "status": "active"
                    }
                    
                    upload_record = await db_manager.create_upload(upload_data)
                    
                    results.append({
                        "upload_id": upload_record["id"],
                        "youtube_url": youtube_url,
                        "video_title": video_title,
                        "orientation": video_data["orientation"],
                        "copy_number": video_data["copy_number"],
                        "group_name": f"{campaign_name} {datetime.now().strftime('%d.%m.%y')} #{video_data['copy_number']}",
                        "success": True
                    })
                    
                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                    await db_manager.create_log(
                        "video_uploaded_batch",
                        {
                            "upload_id": upload_record["id"],
                            "campaign_name": campaign_name,
                            "youtube_url": youtube_url,
                            "thumbnail_type": thumbnail_option,
                            "orientation": video_data["orientation"],
                            "batch_index": i + 1
                        }
                    )
                
            except Exception as e:
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ
                await db_manager.create_log(
                    "video_upload_batch_error",
                    {
                        "campaign_name": campaign_name,
                        "batch_index": i + 1,
                        "error": str(e)
                    }
                )
                
                results.append({
                    "video_title": f"{campaign_name} –í–∏–¥–µ–æ #{i+1}",
                    "success": False,
                    "error": str(e)
                })
        
        successful_uploads = [r for r in results if r.get("success")]
        failed_uploads = [r for r in results if not r.get("success")]
        
        # –°—á–∏—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã (–ø–æ copy_number)
        unique_groups = set(r.get("copy_number") for r in successful_uploads if r.get("copy_number"))
        
        return {
            "success": True,
            "total_videos": video_count,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ö–æ–¥–Ω—ã—Ö –≤–∏–¥–µ–æ
            "successful_uploads": len(unique_groups),  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –≥—Ä—É–ø–ø
            "total_formats": len(successful_uploads),  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
            "failed_uploads": len(failed_uploads),
            "results": results
        }
        
    except Exception as e:
        await db_manager.create_log("batch_upload_error", {"error": str(e)})
        return JSONResponse(
            status_code=500,
            content={"success": False, "error": str(e)}
        )

@app.post("/upload/modal")
async def upload_modal_image(image: UploadFile = File(...)):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–¥–∞–ª–∫–∏ –¥–ª—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –∫–∞–¥—Ä—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        if image.content_type not in ALLOWED_IMAGE_TYPES:
            raise HTTPException(
                status_code=400, 
                detail=f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: {', '.join(ALLOWED_IMAGE_TYPES)}"
            )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        content = await image.read()
        if len(content) > MAX_FILE_SIZE:
            raise HTTPException(
                status_code=400, 
                detail=f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE // (1024*1024)}MB"
            )
        
        modal_id = str(uuid.uuid4())
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        upload_dir = Path(UPLOAD_DIR) / "modals"
        upload_dir.mkdir(parents=True, exist_ok=True)
        
        file_path = upload_dir / f"{modal_id}_{image.filename}"
        async with aiofiles.open(file_path, 'wb') as f:
            await f.write(content)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        modal_data = await db_manager.create_modal_image(
            filename=image.filename,
            file_path=str(file_path),
            file_size=len(content)
        )
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        await db_manager.create_log(
            "modal_uploaded", 
            {"modal_id": modal_id, "filename": image.filename, "file_size": len(content)}
        )
        
        return {
            "success": True,
            "modal_id": modal_data["id"],
            "filename": image.filename,
            "file_size": len(content)
        }
        
    except HTTPException:
        raise
    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        await db_manager.create_log("modal_upload_error", {"error": str(e)})
        return JSONResponse(
            status_code=500,
            content={"success": False, "error": str(e)}
        )

@app.get("/modals")
async def get_modal_images():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–∞–ª–æ–∫"""
    try:
        modals = await db_manager.get_modal_images()
        return {
            "modals": [
                {
                    "id": modal["id"],
                    "filename": modal["filename"],
                    "file_size": modal.get("file_size"),
                    "is_active": modal.get("is_active", True),
                    "upload_date": modal["created_at"],
                    "file_path": modal.get("file_path")
                }
                for modal in modals
            ]
        }
    except Exception as e:
        await db_manager.create_log("get_modals_error", {"error": str(e)})
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/modals/{modal_id}/preview")
async def get_modal_preview(modal_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–¥–∞–ª–∫–∏"""
    try:
        modal = await db_manager.get_modal_image_by_id(modal_id)
        if not modal:
            raise HTTPException(status_code=404, detail="–ú–æ–¥–∞–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        file_path = modal.get("file_path")
        if not file_path or not os.path.exists(file_path):
            raise HTTPException(status_code=404, detail="–§–∞–π–ª –º–æ–¥–∞–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        from fastapi.responses import FileResponse
        return FileResponse(file_path, media_type="image/jpeg")
        
    except HTTPException:
        raise
    except Exception as e:
        await db_manager.create_log("get_modal_preview_error", {"error": str(e)})
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/uploads")
async def get_uploads():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫"""
    try:
        uploads = await db_manager.get_uploads()
        return {"uploads": uploads}
    except Exception as e:
        await db_manager.create_log("get_uploads_error", {"error": str(e)})
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/templates")
async def get_templates():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤"""
    try:
        templates = await db_manager.get_templates()
        return {"templates": templates}
    except Exception as e:
        await db_manager.create_log("get_templates_error", {"error": str(e)})
        raise HTTPException(status_code=500, detail=str(e))

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def save_uploaded_file(file: UploadFile) -> str:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    print(f"üîç DEBUG save_uploaded_file:")
    print(f"   filename: {file.filename}")
    print(f"   content_type: {file.content_type}")
    print(f"   ALLOWED_VIDEO_TYPES: {ALLOWED_VIDEO_TYPES}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    if file.content_type not in ALLOWED_VIDEO_TYPES:
        error_msg = f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞. –ü–æ–ª—É—á–µ–Ω: {file.content_type}, —Ä–∞–∑—Ä–µ—à–µ–Ω—ã: {', '.join(ALLOWED_VIDEO_TYPES)}"
        print(f"‚ùå ERROR: {error_msg}")
        raise HTTPException(status_code=400, detail=error_msg)
    
    upload_dir = Path(UPLOAD_DIR) / "videos"
    upload_dir.mkdir(parents=True, exist_ok=True)
    
    file_path = upload_dir / f"{uuid.uuid4()}_{file.filename}"
    async with aiofiles.open(file_path, 'wb') as f:
        content = await file.read()
        await f.write(content)
    
    return str(file_path)

async def process_video(file_path: str, upload_id: str) -> str:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ: –æ—á–∏—Å—Ç–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏ —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è"""
    import subprocess
    import random
    
    processed_dir = Path(UPLOAD_DIR) / "processed"
    processed_dir.mkdir(parents=True, exist_ok=True)
    
    processed_path = processed_dir / f"{upload_id}_processed.mp4"
    
    try:
        # –û—á–∏—Å—Ç–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏ –ª–µ–≥–∫–∞—è —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ ffmpeg
        # –ù–µ–±–æ–ª—å—à–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        bitrate_variation = random.randint(-100, 100)  # ¬±100 kbps
        fps_variation = random.uniform(0.95, 1.05)  # ¬±5% FPS
        
        ffmpeg_cmd = [
            'ffmpeg', '-i', file_path,
            '-c:v', 'libx264',
            '-c:a', 'aac',
            '-b:v', f'{1000 + bitrate_variation}k',  # –ë–∞–∑–æ–≤—ã–π –±–∏—Ç—Ä–µ–π—Ç —Å –≤–∞—Ä–∏–∞—Ü–∏–µ–π
            '-r', f'{30 * fps_variation:.2f}',  # –ë–∞–∑–æ–≤—ã–π FPS —Å –≤–∞—Ä–∏–∞—Ü–∏–µ–π
            '-map_metadata', '-1',  # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            '-metadata', 'title=',
            '-metadata', 'artist=',
            '-metadata', 'album=',
            '-metadata', 'date=',
            '-metadata', 'comment=',
            '-y',  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª
            str(processed_path)
        ]
        
        print(f"üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ: {file_path}")
        print(f"   –ö–æ–º–∞–Ω–¥–∞ ffmpeg: {' '.join(ffmpeg_cmd)}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        result = subprocess.run(ffmpeg_cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print(f"‚úÖ –í–∏–¥–µ–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_path}")
            return str(processed_path)
        else:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ ffmpeg, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª: {result.stderr}")
            # –ï—Å–ª–∏ ffmpeg –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∫–æ–ø–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
            import shutil
            shutil.copy2(file_path, processed_path)
            return str(processed_path)
            
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: {e}")
        # Fallback - –ø—Ä–æ—Å—Ç–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
        import shutil
        shutil.copy2(file_path, processed_path)
        return str(processed_path)

async def get_video_orientation(video_path: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ"""
    import subprocess
    import json
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ ffprobe
        ffprobe_cmd = [
            'ffprobe', '-v', 'quiet',
            '-print_format', 'json',
            '-show_streams',
            video_path
        ]
        
        result = subprocess.run(ffprobe_cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            data = json.loads(result.stdout)
            video_stream = next((s for s in data['streams'] if s['codec_type'] == 'video'), None)
            
            if video_stream:
                width = int(video_stream['width'])
                height = int(video_stream['height'])
                
                print(f"üìê –†–∞–∑–º–µ—Ä—ã –≤–∏–¥–µ–æ: {width}x{height}")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
                if width > height:
                    return "horizontal"  # 16:9
                elif height > width:
                    return "vertical"    # 9:16
                else:
                    return "square"      # 1:1
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º
        return "horizontal"
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏: {e}")
        return "horizontal"

async def create_other_formats(video_path: str, base_upload_id: str, orientation: str) -> List[dict]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤–∏–¥–µ–æ —Å —á–µ—Ä–Ω—ã–º–∏ –ø–æ–ª–æ—Å–∞–º–∏"""
    import subprocess
    
    formats_dir = Path(UPLOAD_DIR) / "formats"
    formats_dir.mkdir(parents=True, exist_ok=True)
    
    created_formats = []
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å
    formats_to_create = []
    if orientation == "square":
        formats_to_create = [
            {"name": "vertical", "width": 720, "height": 1280, "aspect": "9:16"},
            {"name": "horizontal", "width": 1280, "height": 720, "aspect": "16:9"}
        ]
    elif orientation == "horizontal":
        formats_to_create = [
            {"name": "square", "width": 720, "height": 720, "aspect": "1:1"},
            {"name": "vertical", "width": 720, "height": 1280, "aspect": "9:16"}
        ]
    elif orientation == "vertical":
        formats_to_create = [
            {"name": "square", "width": 720, "height": 720, "aspect": "1:1"},
            {"name": "horizontal", "width": 1280, "height": 720, "aspect": "16:9"}
        ]
    
    print(f"üé¨ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è {orientation} –≤–∏–¥–µ–æ: {[f['name'] for f in formats_to_create]}")
    
    for fmt in formats_to_create:
        try:
            output_path = formats_dir / f"{base_upload_id}_{fmt['name']}.mp4"
            
            # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ —Å —á–µ—Ä–Ω—ã–º–∏ –ø–æ–ª–æ—Å–∞–º–∏ (letterbox/pillarbox)
            # scale: –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
            # pad: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–Ω—ã—Ö –ø–æ–ª–æ—Å
            ffmpeg_cmd = [
                'ffmpeg', '-i', video_path,
                '-vf', f"scale={fmt['width']}:{fmt['height']}:force_original_aspect_ratio=decrease,pad={fmt['width']}:{fmt['height']}:(ow-iw)/2:(oh-ih)/2:black",
                '-c:v', 'libx264',
                '-c:a', 'aac',
                '-b:v', '1000k',
                '-b:a', '128k',
                '-y',
                str(output_path)
            ]
            
            print(f"   üîß –°–æ–∑–¥–∞–Ω–∏–µ {fmt['name']} —Ñ–æ—Ä–º–∞—Ç–∞ ({fmt['width']}x{fmt['height']})...")
            result = subprocess.run(ffmpeg_cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                print(f"   ‚úÖ {fmt['name'].capitalize()} —Ñ–æ—Ä–º–∞—Ç —Å–æ–∑–¥–∞–Ω: {output_path}")
                created_formats.append({
                    "orientation": fmt['name'],
                    "path": str(output_path),
                    "resolution": f"{fmt['width']}x{fmt['height']}",
                    "aspect": fmt['aspect']
                })
            else:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {fmt['name']} —Ñ–æ—Ä–º–∞—Ç–∞: {result.stderr}")
                
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {fmt['name']} —Ñ–æ—Ä–º–∞—Ç–∞: {e}")
    
    return created_formats

def generate_video_title(campaign_name: str, orientation: str, copy_number: int = 1) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ: –∫–∞–º–ø–∞–Ω–∏—è + –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è (–∞–Ω–≥–ª) + –¥–∞—Ç–∞ + #–Ω–æ–º–µ—Ä"""
    from datetime import datetime
    
    # –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
    orientation_en = {
        "horizontal": "Landscape",
        "vertical": "Portrait",
        "square": "Square"
    }.get(orientation, orientation.capitalize())
    
    # –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: –î–î.–ú–ú.–ì–ì
    date_str = datetime.now().strftime("%d.%m.%y")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ: "–ù–∞–∑–≤–∞–Ω–∏–µ –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –î–∞—Ç–∞ #–ù–æ–º–µ—Ä"
    title = f"{campaign_name} {orientation_en} {date_str} #{copy_number}"
    
    return title

async def download_from_drive(drive_url: str, upload_id: str) -> str:
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ Google Drive"""
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑ Google Drive
    # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
    downloaded_dir = Path(UPLOAD_DIR) / "downloaded"
    downloaded_dir.mkdir(parents=True, exist_ok=True)
    
    return str(downloaded_dir / f"{upload_id}_from_drive.mp4")

async def process_thumbnail(video_path: str, option: str, modal_id: Optional[str]) -> Optional[str]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∏–Ω–∏–∞—Ç—é—Ä—ã"""
    import subprocess
    from PIL import Image, ImageDraw, ImageFont
    import os
    
    if option == "none":
        return None
    
    thumbnails_dir = Path(UPLOAD_DIR) / "thumbnails"
    thumbnails_dir.mkdir(parents=True, exist_ok=True)
    
    try:
        if option == "first_frame":
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞
            thumbnail_path = thumbnails_dir / f"{uuid.uuid4()}_first_frame.jpg"
            
            ffmpeg_cmd = [
                'ffmpeg', '-i', video_path,
                '-ss', '00:00:00.1',  # 100 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –æ—Ç –Ω–∞—á–∞–ª–∞
                '-vframes', '1',      # –û–¥–∏–Ω –∫–∞–¥—Ä
                '-q:v', '2',          # –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                '-y',
                str(thumbnail_path)
            ]
            
            print(f"üñºÔ∏è –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞: {video_path}")
            result = subprocess.run(ffmpeg_cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                print(f"‚úÖ –ü–µ—Ä–≤—ã–π –∫–∞–¥—Ä –∏–∑–≤–ª–µ—á–µ–Ω: {thumbnail_path}")
                return str(thumbnail_path)
            else:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–∞–¥—Ä–∞: {result.stderr}")
                return None
                
        elif option == "soft_modal" and modal_id:
            # –ù–∞–ª–æ–∂–µ–Ω–∏–µ –º–æ–¥–∞–ª–∫–∏ –Ω–∞ –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä
            thumbnail_path = thumbnails_dir / f"{uuid.uuid4()}_with_modal.jpg"
            
            # –°–Ω–∞—á–∞–ª–∞ –∏–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä
            temp_frame = thumbnails_dir / f"temp_frame_{uuid.uuid4()}.jpg"
            ffmpeg_cmd = [
                'ffmpeg', '-i', video_path,
                '-ss', '00:00:00.1',  # 100 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –æ—Ç –Ω–∞—á–∞–ª–∞
                '-vframes', '1',
                '-q:v', '2',
                '-y',
                str(temp_frame)
            ]
            
            result = subprocess.run(ffmpeg_cmd, capture_output=True, text=True)
            if result.returncode != 0:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–∞–¥—Ä–∞ –¥–ª—è –º–æ–¥–∞–ª–∫–∏: {result.stderr}")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –º–æ–¥–∞–ª–∫–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            modal_data = await db_manager.get_modal_image_by_id(modal_id)
            if not modal_data or not modal_data.get("file_path"):
                print(f"‚ö†Ô∏è –ú–æ–¥–∞–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {modal_id}")
                return None
            
            modal_path = modal_data["file_path"]
            
            # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –Ω–∞ –∫–∞–¥—Ä
            try:
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                frame_img = Image.open(temp_frame)
                modal_img = Image.open(modal_path)
                
                print(f"üñºÔ∏è –†–∞–∑–º–µ—Ä –∫–∞–¥—Ä–∞: {frame_img.size}")
                print(f"üñºÔ∏è –†–∞–∑–º–µ—Ä –º–æ–¥–∞–ª–∫–∏: {modal_img.size}")
                
                # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –º–æ–¥–∞–ª–∫–∏ –ø–æ–¥ —Ä–∞–∑–º–µ—Ä –∫–∞–¥—Ä–∞
                modal_img = modal_img.resize(frame_img.size, Image.Resampling.LANCZOS)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGBA –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
                if frame_img.mode != 'RGBA':
                    frame_img = frame_img.convert('RGBA')
                if modal_img.mode != 'RGBA':
                    modal_img = modal_img.convert('RGBA')
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π RGBA –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                composite = Image.new('RGBA', frame_img.size)
                
                # –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –∫–∞–¥—Ä
                composite.paste(frame_img, (0, 0))
                
                # –ó–∞—Ç–µ–º –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª –º–æ–¥–∞–ª–∫–∏ –Ω–∞ 128 (50% –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏)
                modal_with_alpha = modal_img.copy()
                modal_with_alpha.putalpha(128)
                
                # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
                composite.paste(modal_with_alpha, (0, 0), modal_with_alpha)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ RGB –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                composite_rgb = composite.convert('RGB')
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                composite_rgb.save(thumbnail_path, 'JPEG', quality=95)
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if temp_frame.exists():
                    temp_frame.unlink()
                
                print(f"‚úÖ –ú–∏–Ω–∏–∞—Ç—é—Ä–∞ —Å –º–æ–¥–∞–ª–∫–æ–π —Å–æ–∑–¥–∞–Ω–∞: {thumbnail_path}")
                print(f"üñºÔ∏è –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {thumbnail_path.exists()}")
                return str(thumbnail_path)
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–Ω–∏–∞—Ç—é—Ä—ã —Å –º–æ–¥–∞–ª–∫–æ–π: {e}")
                return None
    
    except Exception as e:
        print(f"‚ö†Ô∏è –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∏–Ω–∏–∞—Ç—é—Ä—ã: {e}")
        return None
    
    return None

async def upload_to_youtube(video_path: str, title: str, thumbnail_path: Optional[str]) -> str:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –Ω–∞ YouTube"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å YouTube
        result = await integration_manager.upload_video_to_youtube(
            video_path=video_path,
            title=title,
            description=f"–í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —á–µ—Ä–µ–∑ UAC Creative Manager\n–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            thumbnail_path=thumbnail_path
        )
        
        if result.get("success"):
            return result.get("video_url")
        else:
            # –ï—Å–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            await db_manager.create_log("youtube_upload_fallback", {"error": result.get("error", "Unknown error")})
            return f"https://youtube.com/watch?v={str(uuid.uuid4())[:11]}"
            
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        await db_manager.create_log("youtube_upload_error", {"error": str(e)})
        return f"https://youtube.com/watch?v={str(uuid.uuid4())[:11]}"

# ==================== INTEGRATION ENDPOINTS ====================

@app.post("/integrations/youtube/setup")
async def setup_youtube_integration(request: Request):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ YouTube –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    try:
        data = await request.json()
        client_id = data.get("client_id")
        client_secret = data.get("client_secret")
        redirect_uri = data.get("redirect_uri")
        
        if not client_id or not client_secret:
            return {"success": False, "error": "client_id –∏ client_secret –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"}
        
        result = await integration_manager.setup_youtube_credentials(client_id, client_secret, redirect_uri)
        return result
    except Exception as e:
        await db_manager.create_log("youtube_setup_error", {"error": str(e)})
        return {"success": False, "error": str(e)}

@app.post("/integrations/youtube/test")
async def test_youtube_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ YouTube –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    try:
        result = await integration_manager.test_youtube_connection()
        return result
    except Exception as e:
        await db_manager.create_log("youtube_test_error", {"error": str(e)})
        return {"success": False, "error": str(e)}

@app.post("/integrations/telegram/setup")
async def setup_telegram_integration(request: Request):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    try:
        data = await request.json()
        bot_token = data.get("bot_token")
        chat_id = data.get("chat_id")
        
        if not bot_token:
            return {"success": False, "error": "bot_token –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"}
        
        result = await integration_manager.setup_telegram_bot(bot_token, chat_id)
        return result
    except Exception as e:
        await db_manager.create_log("telegram_setup_error", {"error": str(e)})
        return {"success": False, "error": str(e)}

@app.post("/integrations/telegram/test")
async def test_telegram_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    try:
        result = await integration_manager.test_telegram_connection()
        return result
    except Exception as e:
        await db_manager.create_log("telegram_test_error", {"error": str(e)})
        return {"success": False, "error": str(e)}

@app.post("/integrations/google-drive/setup")
async def setup_google_drive_integration(request: Request):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Drive –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    try:
        data = await request.json()
        client_id = data.get("client_id")
        client_secret = data.get("client_secret")
        redirect_uri = data.get("redirect_uri")
        
        if not client_id or not client_secret:
            return {"success": False, "error": "client_id –∏ client_secret –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"}
        
        result = await integration_manager.setup_google_drive_credentials(client_id, client_secret, redirect_uri)
        return result
    except Exception as e:
        await db_manager.create_log("google_drive_setup_error", {"error": str(e)})
        return {"success": False, "error": str(e)}

@app.post("/integrations/google-drive/test")
async def test_google_drive_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google Drive –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    try:
        result = await integration_manager.test_google_drive_connection()
        return result
    except Exception as e:
        await db_manager.create_log("google_drive_test_error", {"error": str(e)})
        return {"success": False, "error": str(e)}

@app.post("/integrations/google-ads/setup")
async def setup_google_ads_integration(request: Request):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Ads –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    try:
        data = await request.json()
        client_id = data.get("client_id")
        client_secret = data.get("client_secret")
        refresh_token = data.get("refresh_token")
        developer_token = data.get("developer_token")
        customer_id = data.get("customer_id")
        
        if not client_id or not client_secret:
            return {"success": False, "error": "client_id –∏ client_secret –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"}
        
        result = await integration_manager.setup_google_ads_credentials(
            client_id, client_secret, refresh_token, developer_token, customer_id
        )
        return result
    except Exception as e:
        await db_manager.create_log("google_ads_setup_error", {"error": str(e)})
        return {"success": False, "error": str(e)}

@app.post("/integrations/google-ads/test")
async def test_google_ads_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google Ads –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    try:
        result = await integration_manager.test_google_ads_connection()
        return result
    except Exception as e:
        await db_manager.create_log("google_ads_test_error", {"error": str(e)})
        return {"success": False, "error": str(e)}

@app.get("/integrations/status")
async def get_integrations_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
    try:
        integrations = {}
        
        # YouTube
        youtube_creds = await db_manager.get_oauth_credentials("youtube")
        integrations["youtube"] = {
            "configured": bool(youtube_creds),
            "has_credentials": bool(youtube_creds and youtube_creds.get("credentials", {}).get("client_id")),
            "authorized": bool(youtube_creds and youtube_creds.get("credentials", {}).get("access_token"))
        }
        
        # Telegram
        telegram_creds = await db_manager.get_oauth_credentials("telegram")
        integrations["telegram"] = {
            "configured": bool(telegram_creds),
            "has_credentials": bool(telegram_creds and telegram_creds.get("credentials", {}).get("bot_token"))
        }
        
        # Google Drive
        drive_creds = await db_manager.get_oauth_credentials("google_drive")
        integrations["google_drive"] = {
            "configured": bool(drive_creds),
            "has_credentials": bool(drive_creds and drive_creds.get("credentials", {}).get("client_id")),
            "authorized": bool(drive_creds and drive_creds.get("credentials", {}).get("access_token"))
        }
        
        # Google Ads
        ads_creds = await db_manager.get_oauth_credentials("google_ads")
        integrations["google_ads"] = {
            "configured": bool(ads_creds),
            "has_credentials": bool(ads_creds and ads_creds.get("credentials", {}).get("client_id")),
            "authorized": bool(ads_creds and ads_creds.get("credentials", {}).get("access_token"))
        }
        
        return {"integrations": integrations}
        
    except Exception as e:
        await db_manager.create_log("integrations_status_error", {"error": str(e)})
        return {"success": False, "error": str(e)}

@app.get("/integrations/settings")
async def get_integrations_settings():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
    try:
        settings = {}
        
        # YouTube
        youtube_creds = await db_manager.get_oauth_credentials("youtube")
        if youtube_creds and youtube_creds.get("credentials"):
            creds = youtube_creds["credentials"]
            settings["youtube"] = {
                "client_id": creds.get("client_id", ""),
                "client_secret": creds.get("client_secret", ""),
                "redirect_uri": creds.get("redirect_uri", "")
            }
        else:
            settings["youtube"] = {"client_id": "", "client_secret": "", "redirect_uri": ""}
        
        # Telegram
        telegram_creds = await db_manager.get_oauth_credentials("telegram")
        if telegram_creds and telegram_creds.get("credentials"):
            creds = telegram_creds["credentials"]
            settings["telegram"] = {
                "bot_token": creds.get("bot_token", ""),
                "chat_id": creds.get("chat_id", "")
            }
        else:
            settings["telegram"] = {"bot_token": "", "chat_id": ""}
        
        # Google Drive
        drive_creds = await db_manager.get_oauth_credentials("google_drive")
        if drive_creds and drive_creds.get("credentials"):
            creds = drive_creds["credentials"]
            settings["google_drive"] = {
                "client_id": creds.get("client_id", ""),
                "client_secret": creds.get("client_secret", ""),
                "redirect_uri": creds.get("redirect_uri", "")
            }
        else:
            settings["google_drive"] = {"client_id": "", "client_secret": "", "redirect_uri": ""}
        
        # Google Ads
        ads_creds = await db_manager.get_oauth_credentials("google_ads")
        if ads_creds and ads_creds.get("credentials"):
            creds = ads_creds["credentials"]
            settings["google_ads"] = {
                "client_id": creds.get("client_id", ""),
                "client_secret": creds.get("client_secret", ""),
                "refresh_token": creds.get("refresh_token", ""),
                "developer_token": creds.get("developer_token", ""),
                "customer_id": creds.get("customer_id", "")
            }
        else:
            settings["google_ads"] = {
                "client_id": "", "client_secret": "", "refresh_token": "", 
                "developer_token": "", "customer_id": ""
            }
        
        return {"success": True, "settings": settings}
        
    except Exception as e:
        await db_manager.create_log("integrations_settings_error", {"error": str(e)})
        return {"success": False, "error": str(e)}

@app.post("/integrations/telegram/send-notification")
async def send_telegram_notification(
    message: str = Form(...)
):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
    try:
        result = await integration_manager.send_telegram_notification(message)
        return result
    except Exception as e:
        await db_manager.create_log("telegram_notification_error", {"error": str(e)})
        return {"success": False, "error": str(e)}

@app.get("/auth/youtube/callback")
async def youtube_oauth_callback(
    code: Optional[str] = None,
    state: Optional[str] = None,
    error: Optional[str] = None
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ OAuth callback –¥–ª—è YouTube"""
    try:
        if error:
            return JSONResponse(
                content={"success": False, "error": f"OAuth error: {error}"},
                status_code=400
            )
        
        if not code:
            return JSONResponse(
                content={"success": False, "error": "Authorization code not provided"},
                status_code=400
            )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
        result = await integration_manager.handle_youtube_oauth_callback(code, state)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        if result.get("success"):
            html_content = """
            <!DOCTYPE html>
            <html>
            <head>
                <title>YouTube Authorization</title>
                <meta charset="utf-8">
                <style>
                    body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
                    .success { color: green; }
                    .error { color: red; }
                </style>
            </head>
            <body>
                <h1 class="success">‚úÖ YouTube –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!</h1>
                <p>–ú–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ –æ–∫–Ω–æ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.</p>
                <script>
                    setTimeout(() => {
                        window.close();
                    }, 3000);
                </script>
            </body>
            </html>
            """
        else:
            html_content = f"""
            <!DOCTYPE html>
            <html>
            <head>
                <title>YouTube Authorization</title>
                <meta charset="utf-8">
                <style>
                    body {{ font-family: Arial, sans-serif; text-align: center; padding: 50px; }}
                    .success {{ color: green; }}
                    .error {{ color: red; }}
                </style>
            </head>
            <body>
                <h1 class="error">‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ YouTube</h1>
                <p>{result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}</p>
                <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</p>
                <script>
                    setTimeout(() => {{
                        window.close();
                    }}, 5000);
                </script>
            </body>
            </html>
            """
        
        return HTMLResponse(content=html_content)
        
    except Exception as e:
        await db_manager.create_log("youtube_oauth_callback_error", {"error": str(e)})
        error_html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>YouTube Authorization</title>
            <meta charset="utf-8">
            <style>
                body {{ font-family: Arial, sans-serif; text-align: center; padding: 50px; }}
                .error {{ color: red; }}
            </style>
        </head>
        <body>
            <h1 class="error">‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞</h1>
            <p>{str(e)}</p>
        </body>
        </html>
        """
        return HTMLResponse(content=error_html, status_code=500)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
