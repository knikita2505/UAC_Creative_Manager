#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –Ω–∞ YouTube
"""
import asyncio
import httpx
import json
from pathlib import Path

async def test_youtube_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ YouTube –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    base_url = "http://localhost:8000"
    
    async with httpx.AsyncClient() as client:
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ YouTube –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
        print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π...")
        try:
            response = await client.get(f"{base_url}/integrations/status")
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ –°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –ø–æ–ª—É—á–µ–Ω: {data}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ YouTube
        print("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ YouTube...")
        try:
            response = await client.get(f"{base_url}/integrations/settings")
            if response.status_code == 200:
                data = response.json()
                youtube_settings = data.get("settings", {}).get("youtube", {})
                print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ YouTube: {youtube_settings}")
                
                if youtube_settings.get("client_id"):
                    print("‚úÖ YouTube credentials –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
                else:
                    print("‚ö†Ô∏è YouTube credentials –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {response.status_code}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        
        # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ YouTube
        print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ YouTube...")
        try:
            response = await client.post(f"{base_url}/integrations/youtube/test")
            if response.status_code == 200:
                data = response.json()
                if data.get("success"):
                    print(f"‚úÖ YouTube –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: {data.get('message')}")
                else:
                    print(f"‚ö†Ô∏è YouTube –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {data.get('error')}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è YouTube: {response.status_code}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è YouTube: {e}")
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–∞–ª–æ–∫
        print("\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–∞–ª–æ–∫...")
        try:
            response = await client.get(f"{base_url}/modals")
            if response.status_code == 200:
                data = response.json()
                modals = data.get("modals", [])
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–∞–ª–æ–∫: {len(modals)}")
                for modal in modals:
                    print(f"   - {modal['filename']} (ID: {modal['id']})")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–∞–ª–æ–∫: {response.status_code}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–∞–ª–æ–∫: {e}")
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫
        print("\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫...")
        try:
            response = await client.get(f"{base_url}/uploads")
            if response.status_code == 200:
                data = response.json()
                uploads = data.get("uploads", [])
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–≥—Ä—É–∑–æ–∫: {len(uploads)}")
                for upload in uploads:
                    print(f"   - {upload['campaign_name']} - {upload['youtube_url']}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–æ–∫: {response.status_code}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–æ–∫: {e}")

async def test_upload_simulation():
    """–°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ"""
    base_url = "http://localhost:8000"
    
    print("\nüé¨ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≤–∏–¥–µ–æ —Ñ–∞–π–ª
    test_video_path = Path("test_video.mp4")
    if not test_video_path.exists():
        print("‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π –≤–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É...")
        test_video_path.write_bytes(b"fake video content")
    
    async with httpx.AsyncClient() as client:
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            files = {"video_file": open(test_video_path, "rb")}
            data = {
                "campaign_name": "–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞–º–ø–∞–Ω–∏—è",
                "video_source": "local",
                "thumbnail_option": "none"
            }
            
            print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É...")
            response = await client.post(
                f"{base_url}/upload/video",
                files=files,
                data=data
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get("success"):
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞!")
                    print(f"   - ID: {result.get('upload_id')}")
                    print(f"   - –ù–∞–∑–≤–∞–Ω–∏–µ: {result.get('video_title')}")
                    print(f"   - YouTube URL: {result.get('youtube_url')}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {result.get('error')}")
            else:
                print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        finally:
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            if test_video_path.exists():
                test_video_path.unlink()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è UAC Creative Manager")
    print("=" * 50)
    
    await test_youtube_integration()
    await test_upload_simulation()
    
    print("\n" + "=" * 50)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(main())
